{
  "name": "Motor-shield",
  "tagline": "",
  "body": "## Python Library for SB Motor-shield\r\nSB Components' Motor-Shield python library v.2.\r\n\r\n###Pi Motor-Shield Library Reference: \r\n####Motor  \r\nClass describing a set of Motor terminals on the Motor-Shield.\r\n\r\n*__Constructor Arguments__*\r\n\r\n_motor_\r\n\r\nThe label of the relevant motor terminal (i.e. \"MOTOR1\", \"MOTOR2\", \"MOTOR3\", \"MOTOR4\")  \r\n\r\n_config_ \r\n\r\nAn integer (1 or 2) defining which pin should be considered \"forward\" and which \"reverse\"\r\n\r\n*__Methods__*\r\n\r\n__test__(state)\r\n\r\nSets the Motor test mode on or off (takes a boolean argument). When *__on__* issuing a command to the motor terminal will illuminate the motor's related LED arrow rather than power the motor.\r\n\r\n__forward()__\r\n\r\nStarts the motor turning in its configured \"forward\" direction.\r\n\r\n__reverse()__\r\n\r\nStarts the motor turning in its configured \"reverse\" direction.\r\n\r\n__stop__\r\n\r\nStops power to the motor\r\n\r\n__Examples__\r\n\r\n```\r\nm1 = Motor(\"MOTOR1\",1)\r\nm1.forward()\r\n```\r\n\r\n####LinkedMotors\r\nThis class describes a set of Motor objects and is used to group related motors together.\r\n\r\n*__Constructor Arguments__*\r\n\r\n__*motors__\r\n\r\nList of Motor objects\r\n\r\n*__Methods__*\r\n\r\n__forward()__\r\n\r\nStarts the linked motors turning in their configured \"forward\" direction.\r\n\r\n__reverse()__\r\n\r\nStarts the linked motors turning in their configured \"forward\" direction.\r\n\r\n__stop()__\r\n\r\nStops power to the linked motors\r\n\r\n__Example__\r\n\r\n```\r\nm1 = Motor(\"MOTOR1\",1)\r\nm2 = Motor(\"MOTOR2\",2)\r\nmtrs = LinkedMotors(m,m2)\r\nmtrs.forward()\r\n```\r\n\r\n###Sensor\r\nThis class describes the sensor connectors on the Motor-Shield\r\n\r\n*__Constructor arguments__*\r\n\r\n__sensortype__\r\n\r\nstring identifying which sensor is being configured. i.e. \"IR1\", \"IR2\", \"ULTRASONIC\"\r\n\r\n__boundary__\r\n\r\nAn integer specifying the minimum distance (in centimeters) at which the sensor will return a Triggered response of True. This is only meaningful for the ultrasonic sensor.\r\n\r\n*__Methods__*\r\n\r\n__trigger()__\r\n\r\nExecutes the relevant routine that activates and takes a reading from the specified sensor. If the specified \"boundary\" has been breached the Sensor's Triggered attribute gets set to True.\r\n\r\n__Example__\r\n\r\n```\r\nus = Sensor(\"ULTRASONIC\",10)\r\nus.trigger()\r\nif us.Triggered:\r\n    print(\"Boundary breached\")\r\n\r\n```\r\n```\r\nir1 = Sensor(\"IR1\",0)\r\nir1.trigger()\r\nif ir1.Triggered:\r\n    print(\"IR triggered\")\r\n```\r\n\r\n###Arrow\r\n\r\nClass defining the arrow LEDs mounted on the Motor-Shield.\r\n\r\n*__Constructor Arguments__*\r\n\r\n__which__\r\n\r\nAn integer (1 - 4) representing an LED arrow. The arrow number if arbitrary starting with:\r\n            1 = Arrow closest to the Motorshield's power pins and running clockwise round the board\r\n            ...\r\n            4 = Arrow closest to the motor pins.\r\n\r\n*__Methods__*\r\n\r\n__on()__\r\n\r\nTurns on the LED arrow\r\n\r\n__off()__\r\n\r\nTurns off the LED arrow\r\n\r\n__Example__\r\n\r\n```\r\na1 = Arrow(1)\r\na1.on()\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}